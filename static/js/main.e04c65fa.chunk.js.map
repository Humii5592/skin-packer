{"version":3,"sources":["Uuid.js","App.js","serviceWorker.js","index.js"],"names":["UUID","className","htmlFor","type","name","id","aria-describedby","placeholder","for","accept","onClick","zip","require","uuid1","uuidv4","uuid2","skin","document","querySelector","value","temp","image","files","imageName","version","parseInt","skinjson","manifest","lang","JSON","stringify","file","binary","generateAsync","then","blob","saveAs","App","style","textAlign","href","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wNAqGeA,MAhGd,WAsEC,OAEI,yBAAKC,UAAU,cACb,2BAAOC,QAAQ,IAAf,iBACA,2BAAOC,KAAK,OAAOF,UAAU,eAAeG,KAAK,GAAGC,GAAG,YAAYC,mBAAiB,SAASC,YAAY,KACzG,2BAAOL,QAAQ,IAAf,iBACA,2BAAOC,KAAK,OAAOF,UAAU,eAAeG,KAAK,GAAGC,GAAG,YAAYC,mBAAiB,SAASC,YAAY,KACzG,2BAAOL,QAAQ,IAAf,kBACA,2BAAOC,KAAK,OAAOF,UAAU,eAAeG,KAAK,GAAGC,GAAG,UAAUC,mBAAiB,SAASC,YAAY,KACvG,6BAGA,2BAAOC,IAAI,IAAX,gBACA,2BAAOL,KAAK,OAAOF,UAAU,eAAeG,KAAK,MAAMC,GAAG,WAAWI,OAAO,OAAOH,mBAAiB,SAASC,YAAY,KAEzH,6BACA,6BAEA,4BAAQJ,KAAK,SAASF,UAAU,kBAAkBS,QAtFhC,WAEtB,IACIC,EAAM,IADEC,EAAQ,KAEhBC,EAAQC,cACRC,EAAQD,cACRE,EAAOC,SAASC,cAAc,cAAcC,MAC5CC,EAAOH,SAASC,cAAc,cAAcC,MAC5CE,EAAQJ,SAASC,cAAc,aAAaI,MAAM,GAClDC,EAAYN,SAASC,cAAc,aAAaI,MAAM,GAAGlB,KACzDoB,EAAUP,SAASC,cAAc,YAAYC,MACjDK,EAAUC,SAASD,EAAS,IAG5B,IAAIE,EACF,CACE,MAAQ,CACL,CACG,kBAAoB,GAApB,OAAuBV,GACvB,SAAW,2BACX,QAAU,GAAV,OAAaO,GACb,KAAO,SAEV,eAAiB,GAAjB,OAAoBH,GACvB,kBAAoB,GAApB,OAAuBA,IAGvBO,EACF,CACE,eAAkB,EAClB,OAAU,CACN,KAAO,GAAP,OAAWP,GACX,KAAO,GAAP,OAAWP,GACX,QAAW,CACPW,EAAQ,EAAE,IAGlB,QAAW,CACP,CACI,KAAQ,YACR,KAAO,GAAP,OAAWT,GACX,QAAW,CACTS,EAAQ,EAAE,MAMtBI,EAAI,mBAAeR,EAAf,YAAuBA,EAAvB,oBACDA,EADC,YACOJ,EADP,iBACoBA,EADpB,QAGRU,EAAWG,KAAKC,UAAUJ,GAC1BC,EAAWE,KAAKC,UAAUH,GAG1BhB,EAAIoB,KAAJ,UAAYX,EAAZ,yBAAkCM,IAClCf,EAAIoB,KAAJ,UAAYX,EAAZ,4BAAqCO,IACrChB,EAAIoB,KAAJ,UAAYX,EAAZ,+BAAuCQ,IACvCjB,EAAIoB,KAAJ,UAAYX,EAAZ,YAAoBG,GAAYF,EAAM,CAACW,QAAO,IAG9CrB,EAAIsB,cAAc,CAAC9B,KAAK,SACvB+B,MAAK,SAAUC,GACZC,iBAAOD,EAAD,UAAUf,EAAV,iBAuBJ,Y,MCpDOiB,MAnCf,WAEA,OAEE,yBAAKpC,UAAU,OACb,yBAAKA,UAAU,aACb,4BAAQA,UAAU,cAChB,6BAEA,yBAAKA,UAAU,aACb,wBAAIA,UAAU,YAAYqC,MAAO,CAAEC,UAAW,WAA9C,kCAIA,wBAAItC,UAAU,WAKlB,qLACA,uBAAGqC,MAAO,CAAEC,UAAW,WAAvB,0DAEE,uBAAGC,KAAK,kCAAkCC,OAAO,UAAjD,UAFF,KAIA,6BAEA,kBAAC,EAAD,MAEF,4HCtBgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhC,SAASiC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e04c65fa.chunk.js","sourcesContent":["import React, { Component} from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { saveAs } from 'file-saver';\r\n\r\n function UUID () {\r\n\r\n  let handleButtonClick = () => {\r\n\r\n    let JSZip = require(\"jszip\");\r\n    let zip = new JSZip();\r\n    let uuid1 = uuidv4();\r\n    let uuid2 = uuidv4();\r\n    let skin = document.querySelector('#skin-name').value;\r\n    let temp = document.querySelector('#temp-name').value;\r\n    let image = document.querySelector('#image-id').files[0];\r\n    let imageName = document.querySelector('#image-id').files[0].name; \r\n    let version = document.querySelector('#version').value;\r\n    version = parseInt(version, 10);\r\n\r\n    // on button click try and export as json file\r\n    let skinjson =    \r\n      {\r\n        \"skins\":[\r\n           {\r\n              \"localization_name\":`${skin}`,\r\n              \"geometry\":\"geometry.humanoid.custom\",\r\n              \"texture\":`${imageName}`,\r\n              \"type\":\"free\"\r\n           }\r\n        ], \"serialize_name\":`${temp}`,\r\n        \"localization_name\":`${temp}`\r\n      }\r\n\r\n    let manifest = \r\n      {\r\n        \"format_version\": 1,\r\n        \"header\": {\r\n            \"name\": `${temp}`,\r\n            \"uuid\": `${uuid1}`,\r\n            \"version\": [\r\n                version,0,0\r\n            ]\r\n        },\r\n        \"modules\": [\r\n            {\r\n                \"type\": \"skin_pack\",\r\n                \"uuid\": `${uuid2}`,\r\n                \"version\": [\r\n                  version,0,0\r\n                ]\r\n            }\r\n        ]\r\n      }\r\n\r\n  let lang = `skinpack.${temp}=${temp}\r\n  skin.${temp}.${skin} name=${skin}\r\n  `\r\n  skinjson = JSON.stringify(skinjson)\r\n  manifest = JSON.stringify(manifest)\r\n\r\n  // create a file and a folder\r\n  zip.file(`${temp}/skins.json`, `${skinjson}`);\r\n  zip.file(`${temp}/manifest.json`, `${manifest}`);\r\n  zip.file(`${temp}/texts/en_US.lang`,`${lang}`)\r\n  zip.file(`${temp}/${imageName}`,image,{binary:true});\r\n\r\n  // zip then download\r\n  zip.generateAsync({type:\"blob\"})\r\n  .then(function (blob) {\r\n      saveAs(blob, `${temp}.mcpack`);\r\n  });\r\n\r\n};\r\n\r\n  return ( \r\n\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"\">Name for Skin</label>\r\n        <input type=\"text\" className=\"form-control\" name=\"\" id=\"skin-name\" aria-describedby=\"helpId\" placeholder=\"\" />\r\n        <label htmlFor=\"\">Template Name</label>\r\n        <input type=\"text\" className=\"form-control\" name=\"\" id=\"temp-name\" aria-describedby=\"helpId\" placeholder=\"\" />\r\n        <label htmlFor=\"\">Version Number</label>\r\n        <input type=\"text\" className=\"form-control\" name=\"\" id=\"version\" aria-describedby=\"helpId\" placeholder=\"\" />\r\n        <br></br>\r\n\r\n        {/* need to do some form validation stuff on this  */}\r\n        <label for=\"\">Image Upload</label>\r\n        <input type=\"file\" className=\"form-control\" name=\"png\" id=\"image-id\" accept=\".png\" aria-describedby=\"helpId\" placeholder=\"\" /> \r\n\r\n        <br></br>\r\n        <br />\r\n\r\n        <button type=\"submit\" className=\"btn btn-primary\" onClick={handleButtonClick}>\r\n          Submit\r\n        </button>\r\n\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default UUID;","import React from \"react\";\r\nimport UUID from \"./Uuid\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n\r\nfunction App() {\r\n\r\nreturn (\r\n\r\n  <div className=\"App\">\r\n    <div className=\"container\">\r\n      <header className=\"App-header\">\r\n        <br />\r\n\r\n        <div className=\"jumbotron\">\r\n          <h1 className=\"display-3\" style={{ textAlign: \"center\" }}>\r\n            Skinpack creator for Minecraft \r\n          </h1>\r\n\r\n          <hr className=\"my-2\" />\r\n        </div>\r\n      </header>\r\n\r\n      {/* test  asdf */}\r\n      <p>Edit a custom skin, fill out the name for your skin, template, and version number then upload your custom skin image file as a .png then press submit.</p>\r\n      <p style={{ textAlign: \"center\" }}>\r\n        You can edit Minecraft skins and download the PNG files\r\n        <a href=\"https://www.minecraftskins.net/\" target=\"_blank\"> here </a>.\r\n      </p>\r\n      <br></br>\r\n\r\n      <UUID></UUID>\r\n\r\n    <p>*This Web Application is not endorsed by or affiliated with Mojang, Microsoft or Minecraft</p>\r\n    </div>\r\n  </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["components/FileInput.jsx","components/Skinview.jsx","App.js","index.js"],"names":["FileInput","useState","skin","setSkin","Col","id","htmlFor","type","className","name","accept","placeholder","onChange","e","skinFile","nativeEvent","target","files","reader","FileReader","onloadend","theFileContents","result","readAsDataURL","err","console","log","required","skinUrl","height","width","Skinview","skinjson","skins","imageName","zip","JSZip","useEffect","input","document","querySelectorAll","i","length","addEventListener","event","classList","remove","handleButtonClick","querySelector","pack","model","vers","temp","value","lang","add","sessionStorage","setItem","uuid1","uuidv4","uuid2","version","parseInt","image","fileName","skinName","push","Number","isNaN","localization_name","geometry","texture","manifest","format_version","header","uuid","modules","j","element","skinjson_string","JSON","stringify","manifest_string","join","file","binary","srcElement","download","style","generateAsync","then","blob","saveAs","window","location","reload","Container","Row","Button","onClick","variant","App","onresize","button","innerWidth","textAlign","href","rel","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.4a894c8f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Skinview3d from 'react-skinview3d';\nimport '../styles/styles.css';\nimport { Col } from 'react-bootstrap';\n\nfunction FileInput() {\n    // set default texture to load\n    var [skin, setSkin] = useState('');\n\n    \"experimenting with changes to remove applied skin image when user presses addSkin button\"\n    // var skinCheck = sessionStorage.getitem('skin')\n\n    // chuck a useEffect before this?\n\n    // if (skinCheck == 'noSkin') {\n\n    //     setSkin('')\n\n    // }\n\n    // when new image is uploaded, change skin state to uploaded skin\n    let onFileChange = (e) => {\n        var skinFile = e.nativeEvent.target.files[0];\n        let reader = new FileReader();\n        reader.onloadend = function () {\n            let theFileContents = reader.result;\n            setSkin(theFileContents);\n        };\n\n        // handle error when someone doesn't select a file\n        try {\n            reader.readAsDataURL(skinFile);   \n        } catch (err) {\n            console.log('no file selected');\n        }\n    }; // end of skin preview\n\n    return (\n        <Col id=\"FileInput\">\n            <label htmlFor=\"image upload\">*Image Upload</label>\n            <input\n                type=\"file\"\n                className=\"form-control\"\n                name=\"png\"\n                // multiple\n                id=\"image-id\"\n                accept=\".png\"\n                aria-describedby=\"helpId\"\n                placeholder=\"\"\n                onChange={onFileChange}\n                required\n            />\n            <br></br>\n            <Skinview3d skinUrl={skin} height=\"300\" width=\"300\" />\n            <br></br>\n        </Col>\n    );\n}\nexport default FileInput;\n","import React, { useEffect } from 'react';\nimport { Container, Row, Col, Button } from 'react-bootstrap';\nimport { v4 as uuidv4 } from 'uuid';\nimport { saveAs } from 'file-saver';\nimport FileInput from './FileInput';\nimport JSZip from 'jszip';\nimport '../styles/formError.css';\nimport '../styles/styles.css';\n\nexport default function Skinview() {\n\n  // set empty skin array which is where we will push skin data into\n  var skinjson = {\n    skins: [],\n  };\n\n  var imageName = [];\n  var zip = new JSZip();\n\n  // watch inputs for changes (for error handle and user feedback)\n  useEffect(() => {\n    var input = document.querySelectorAll('input');\n\n    for (let i = 0; i < input.length; i++) {\n      var element = input[i];\n\n      element.addEventListener('change', (event) => {\n        event.target.classList.remove('error');\n      });\n    }\n  });\n\n  // function to handle both buttons, conditional in function to determine which button pushed and appropriate logic to implement. \n  let handleButtonClick = (e) => {\n\n    var skin = document.querySelector('#skin-name');\n    var pack = document.querySelector('#temp-name');\n    var model = document.querySelector('#image-id');\n    var vers = document.querySelector('#version');\n    var temp = pack.value;\n    var lang = [`skinpack.${temp}=${temp}`];\n\n    // error handling (ui feedback)...for form, show red color if fields not filled out\n    skin.value == ''\n      ? skin.classList.add('error')\n      : skin.classList.remove('error');\n\n    pack.value == ''\n      ? pack.classList.add('error')\n      : pack.classList.remove('error');\n\n    model.value == ''\n      ? model.classList.add('error')\n      : model.classList.remove('error');\n\n    vers.value == ''\n      ? vers.classList.add('error')\n      : vers.classList.remove('error');\n\n    const files = model.files;\n\n    sessionStorage.setItem('skin','test')\n\n    // loop through image file names, and image files\n    for (let i = 0; i < files.length; i++) {\n      let uuid1 = uuidv4();\n      let uuid2 = uuidv4();\n      let version = document.querySelector('#version').value;\n      version = parseInt(version, 10);\n      var image = document.querySelector('#image-id').files[i];\n      var fileName = document.querySelector('#image-id').files[i].name;\n      var skinName = document.querySelector('#skin-name').value;\n      imageName.push(document.querySelector('#skin-name').value);\n\n      \" error check: if form inputs empty, don't push to array, else push to array\"\n      if (skinName != \"\" && temp != \"\" && fileName != \"\" && !Number.isNaN(version)  ) {\n\n        // skin json push to array\n        skinjson.skins.push({\n         localization_name: `${skinName}`,\n         geometry: `geometry.${temp}.${skinName}`,\n         texture: `${fileName}`,\n         type: 'free',\n        });\n      }\n\n      skinjson['serialize_name'] = `${temp}`;\n      skinjson['localization_name'] = `${temp}`;\n\n      // for the manifest json\n      var manifest = {\n        format_version: 1,\n        header: {\n          name: `${temp}`,\n          uuid: `${uuid1}`,\n          version: [version, 0, 0],\n        },\n        modules: [\n          {\n            type: 'skin_pack',\n            uuid: `${uuid2}`,\n            version: [version, 0, 0],\n          },\n        ],\n      };\n\n      // loop through and add image names to json\n      for (let j = 0; j < imageName.length; j++) {\n        const element = imageName[j];\n        lang.push(`\n                skin.${temp}.${element}=${element}\n            `);\n      }\n\n      var skinjson_string = JSON.stringify(skinjson);\n      var manifest_string = JSON.stringify(manifest);\n\n      lang = lang.join('');\n\n      // zip the image files to the temp (skin pack) folder\n      zip.file(`${temp}/${fileName}`, image, {\n        binary: true,\n      });\n\n      // zip the skin, manifest and lang JSON text files into skinpack folder\n      zip.file(`${temp}/skins.json`, `${skinjson_string}`);\n      zip.file(`${temp}/manifest.json`, `${manifest_string}`);\n      zip.file(`${temp}/texts/en_US.lang`, `${lang}`);\n\n      // if the download or add button was pressed and all of the fields are filled then call download function and or add skin\n      if (\n        e.nativeEvent.srcElement.id == 'download' &&\n        skin.value != '' &&\n        pack.value != '' &&\n        model.value != '' &&\n        vers.value != ''\n      ) {\n        // if download button pressed, call the download function\n        download();\n\n      } else if ( // if the add another skin button was pressed clear fields then add new data\n\n        e.nativeEvent.srcElement.id == 'addSkin' &&\n        skin.value != '' &&\n        pack.value != '' &&\n        model.value != '' &&\n        vers.value != ''\n\n      ) {\n\n        // add another skin\n\n        document.querySelector('#skin-name').value = null;\n        document.querySelector('#image-id').value = null;\n        document.querySelector('#temp-name').value = `${temp}`;\n        document.querySelector('#temp-name').style = 'display:none';\n        document.querySelector('#skinPackName').style = 'display:none';\n        document.querySelector('#version').value = `${version}`;\n        document.querySelector('#version').style = 'display:none;';\n        document.querySelector('#version_label').style =\n          'display:none;';\n\n          \"experimenting with sesh storage to change program operation where user presses addSkin, yet old skin doesn't disappear.\"\n          sessionStorage.setItem('skin','noSkin')\n\n\n      } // end of conditional\n    } // end of loop\n  }; // end of handle click function\n\n  function download() {\n\n    var temp = document.querySelector('#temp-name').value;\n    zip.generateAsync({ type: 'blob' }).then(function(blob) {\n      saveAs(blob, `${temp}.mcpack`);\n    });\n\n    // refresh back to main state\n    window.location.reload(false);\n  } // end of download function\n\n  return (\n    <div className=\"Skinview\">\n      <Container>\n        <Row>\n          <Col></Col>\n          <Col>\n            <form>\n              <label htmlFor=\"skin-name\">\n                *Name for the Skin\n              </label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                name=\"\"\n                id=\"skin-name\"\n                aria-describedby=\"helpId\"\n                placeholder=\"\"\n                required\n              />\n              <label htmlFor=\"skinPackName\" id=\"skinPackName\">\n                *Skinpack Name\n              </label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                name=\"\"\n                id=\"temp-name\"\n                aria-describedby=\"helpId\"\n                placeholder=\"\"\n                required\n              />\n              <label htmlFor=\"version number\" id=\"version_label\">\n                *Version Number\n              </label>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                name=\"\"\n                id=\"version\"\n                aria-describedby=\"helpId\"\n                placeholder=\"\"\n                required\n              />\n              <FileInput></FileInput>\n              <br></br>\n              <Col>\n                <Button\n                  type=\"submit\"\n                  id=\"download\"\n                  className=\"btn btn-primary\"\n                  onClick={handleButtonClick}\n                >\n                  Download Pack\n                </Button>\n                <Button\n                  type=\"submit\"\n                  id=\"addSkin\"\n                  variant=\"outline-primary\"\n                  onClick={handleButtonClick}\n                >\n                  Add another Skin\n                </Button>\n              </Col>\n              <br></br>\n            </form>\n          </Col>\n\n          <Col></Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n","import './styles/styles.css';\nimport Skinview from './components/Skinview';\nimport { Container } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\n\nexport default function App() {\n    window.onresize = () => {\n        // let midCol = document.querySelector('.col-sm-3');\n        let button = document.querySelector('#addSkin');\n        if (window.innerWidth <= 384) {\n            // eslint-disable-next-line no-undef\n            button.style = 'margin-top:1em;margin-left:0em';\n            // add canvas size change too\n        } else {\n            button.style = 'margin:none;';\n        }\n    };\n\n    return (\n        <div className=\"app\">\n            <Container>\n                <div className=\"jumbotron\">\n                    <h1 className=\"display-3\" style={{ textAlign: 'center' }}>\n                        Skinpack Creator for Minecraft Education\n                    </h1>\n                    <hr className=\"my-2\" />\n                </div>\n                <span>\n                    <br></br>\n                    <p>\n                        Create a custom skin (in something like the Skindex),\n                        fill out the name for your skin, name for the skin pack,\n                        and a version number then upload your custom skin image\n                        file as a \".png\".{' '}\n                    </p>\n                    <p>\n                        If you want to add more skins to your pack, select \"add\n                        skin\", otherwise press \"download\" to download your pack.{' '}\n                    </p>\n                    <p>\n                        Once downloaded you can double click the file and or\n                        open it from Minecraft. You can edit Minecraft skins and\n                        download the PNG files from\n                        <a\n                            href=\"https://www.minecraftskins.com/\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            {' '}\n                            The Skindex{' '}\n                        </a>\n                        .\n                    </p>\n                    <br></br>\n                </span>\n                <Skinview></Skinview>\n                <p>\n                    *This web application is not endorsed by or affiliated with\n                    Mojang, Microsoft or Minecraft\n                </p>\n            </Container>\n        </div>\n    );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}
{"version":3,"sources":["components/FileInput.jsx","components/Skinview.jsx","App.js","index.js"],"names":["FileInput","useState","skin","setSkin","Col","id","htmlFor","type","className","name","accept","placeholder","onChange","e","skinFile","nativeEvent","target","files","reader","FileReader","onloadend","theFileContents","result","readAsDataURL","err","console","log","required","skinUrl","height","width","Skinview","skinjson","skins","imageName","zip","JSZip","useEffect","input","document","querySelectorAll","i","length","addEventListener","event","classList","remove","handleButtonClick","querySelector","pack","model","vers","temp","value","lang","add","uuid1","uuidv4","uuid2","version","parseInt","image","fileName","skinName","push","localization_name","geometry","texture","manifest","format_version","header","uuid","modules","j","element","skinjson_string","JSON","stringify","manifest_string","join","file","binary","srcElement","download","style","generateAsync","then","blob","saveAs","window","location","reload","Container","Row","Button","onClick","variant","App","onresize","button","innerWidth","textAlign","href","rel","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.224bae0c.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport Skinview3d from 'react-skinview3d';\r\nimport '../styles/styles.css';\r\nimport { Col } from 'react-bootstrap';\r\n\r\nfunction FileInput() {\r\n    // set default texture to load\r\n    var [skin, setSkin] = useState('');\r\n\r\n    // when new image is uploaded, change skin state to uploaded skin\r\n    let onFileChange = (e) => {\r\n        var skinFile = e.nativeEvent.target.files[0];\r\n        let reader = new FileReader();\r\n        reader.onloadend = function () {\r\n            let theFileContents = reader.result;\r\n            setSkin(theFileContents);\r\n        };\r\n\r\n        // handle error when someone doesn't select a file\r\n        try {\r\n            reader.readAsDataURL(skinFile);\r\n            // console.log(e.target.value);\r\n        } catch (err) {\r\n            console.log('no file selected');\r\n        }\r\n    }; // end of skin preview\r\n\r\n    return (\r\n        <Col id=\"FileInput\">\r\n            <label htmlFor=\"image upload\">*Image Upload</label>\r\n            <input\r\n                type=\"file\"\r\n                className=\"form-control\"\r\n                name=\"png\"\r\n                // multiple\r\n                id=\"image-id\"\r\n                accept=\".png\"\r\n                aria-describedby=\"helpId\"\r\n                placeholder=\"\"\r\n                onChange={onFileChange}\r\n                required\r\n            />\r\n            <br></br>\r\n            <Skinview3d skinUrl={skin} height=\"300\" width=\"300\" />\r\n            <br></br>\r\n        </Col>\r\n    );\r\n}\r\nexport default FileInput;\r\n","import React, { useEffect } from 'react';\r\nimport { Container, Row, Col, Button } from 'react-bootstrap';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { saveAs } from 'file-saver';\r\nimport FileInput from './FileInput';\r\nimport JSZip from 'jszip';\r\nimport '../styles/formError.css';\r\nimport '../styles/styles.css';\r\n\r\nexport default function Skinview() {\r\n    var skinjson = {\r\n        skins: [],\r\n    };\r\n\r\n    var imageName = [];\r\n    var zip = new JSZip();\r\n\r\n    // watch inputs for changes (for error handle and user feedback)\r\n    useEffect(() => {\r\n        var input = document.querySelectorAll('input');\r\n\r\n        for (let i = 0; i < input.length; i++) {\r\n            var element = input[i];\r\n\r\n            element.addEventListener('change', (event) => {\r\n                // console.log(event);\r\n                event.target.classList.remove('error');\r\n            });\r\n        }\r\n    });\r\n\r\n    let handleButtonClick = (e) => {\r\n        // eslint-disable-next-line no-undef\r\n\r\n        // stop refreshing page on button press\r\n        var skin = document.querySelector('#skin-name');\r\n        var pack = document.querySelector('#temp-name');\r\n        var model = document.querySelector('#image-id');\r\n        var vers = document.querySelector('#version');\r\n\r\n        var temp = pack.value;\r\n        var lang = [`skinpack.${temp}=${temp}`];\r\n\r\n        // error handling (ui feedback)...for form, show red color if fields not filled out\r\n        skin.value == ''\r\n            ? skin.classList.add('error')\r\n            : skin.classList.remove('error');\r\n\r\n        pack.value == ''\r\n            ? pack.classList.add('error')\r\n            : pack.classList.remove('error');\r\n\r\n        model.value == ''\r\n            ? model.classList.add('error')\r\n            : model.classList.remove('error');\r\n\r\n        vers.value == ''\r\n            ? vers.classList.add('error')\r\n            : vers.classList.remove('error');\r\n\r\n        var files = model.files;\r\n\r\n        // // loop through image file names, and image files\r\n        for (let i = 0; i < files.length; i++) {\r\n            let uuid1 = uuidv4();\r\n            let uuid2 = uuidv4();\r\n            let version = document.querySelector('#version').value;\r\n            version = parseInt(version, 10);\r\n            var image = document.querySelector('#image-id').files[i];\r\n            var fileName = document.querySelector('#image-id').files[i].name;\r\n            var skinName = document.querySelector('#skin-name').value;\r\n            imageName.push(document.querySelector('#skin-name').value);\r\n\r\n            skinjson.skins.push({\r\n                localization_name: `${skinName}`,\r\n                geometry: `geometry.${temp}.${skinName}`,\r\n                texture: `${fileName}`,\r\n                type: 'free',\r\n            });\r\n\r\n            skinjson['serialize_name'] = `${temp}`;\r\n            skinjson['localization_name'] = `${temp}`;\r\n\r\n            // for the manifest json\r\n            var manifest = {\r\n                format_version: 1,\r\n                header: {\r\n                    name: `${temp}`,\r\n                    uuid: `${uuid1}`,\r\n                    version: [version, 0, 0],\r\n                },\r\n                modules: [\r\n                    {\r\n                        type: 'skin_pack',\r\n                        uuid: `${uuid2}`,\r\n                        version: [version, 0, 0],\r\n                    },\r\n                ],\r\n            };\r\n\r\n            // loop through and add image names to json\r\n            for (let j = 0; j < imageName.length; j++) {\r\n                const element = imageName[j];\r\n                lang.push(`\r\n                skin.${temp}.${element}=${element}\r\n            `);\r\n            }\r\n\r\n            var skinjson_string = JSON.stringify(skinjson);\r\n            var manifest_string = JSON.stringify(manifest);\r\n\r\n            lang = lang.join('');\r\n            // console.log(lang);\r\n\r\n            zip.file(`${temp}/${fileName}`, image, {\r\n                binary: true,\r\n            });\r\n\r\n            zip.file(`${temp}/skins.json`, `${skinjson_string}`);\r\n            zip.file(`${temp}/manifest.json`, `${manifest_string}`);\r\n            zip.file(`${temp}/texts/en_US.lang`, `${lang}`);\r\n\r\n            // if the download or add button was pressed and all of the fields are filled then call download function and or add skin\r\n\r\n            if (\r\n                e.nativeEvent.srcElement.id == 'download' &&\r\n                skin.value != '' &&\r\n                pack.value != '' &&\r\n                model.value != '' &&\r\n                vers.value != ''\r\n            ) {\r\n                download();\r\n            } else if (\r\n                e.nativeEvent.srcElement.id == 'addSkin' &&\r\n                skin.value != '' &&\r\n                pack.value != '' &&\r\n                model.value != '' &&\r\n                vers.value != ''\r\n            ) {\r\n                //     .querySelector('.row')\r\n                //     .insertBefore('col', `<h4>Add Skin</h4>`);\r\n                // add another skin\r\n                document.querySelector('#skin-name').value = null;\r\n                document.querySelector('#image-id').value = null;\r\n                document.querySelector('#temp-name').value = `${temp}`;\r\n                // console.log(temp);\r\n                document.querySelector('#temp-name').style = 'display:none';\r\n                document.querySelector('#skinPackName').style = 'display:none';\r\n                document.querySelector('#version').value = `${version}`;\r\n                document.querySelector('#version').style = 'display:none;';\r\n                document.querySelector('#version_label').style =\r\n                    'display:none;';\r\n                // console.log('add another skin');\r\n            } // end of conditional\r\n        } // end of loop\r\n    }; // end of handle click function\r\n\r\n    function download() {\r\n        // add logic that if form inputs empty then don't download\r\n        // document.querySelectorAll('input').value;\r\n        // let files = model.files;\r\n\r\n        var temp = document.querySelector('#temp-name').value;\r\n        zip.generateAsync({ type: 'blob' }).then(function (blob) {\r\n            saveAs(blob, `${temp}.mcpack`);\r\n            // console.log('downloaded');\r\n        });\r\n\r\n        // refresh back to main state\r\n        window.location.reload(false);\r\n    } // end of download function\r\n\r\n    return (\r\n        <div className=\"Skinview\">\r\n            <Container>\r\n                <Row>\r\n                    <Col></Col>\r\n                    <Col>\r\n                        <form>\r\n                            <label htmlFor=\"skin-name\">\r\n                                *Name for the Skin\r\n                            </label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                name=\"\"\r\n                                id=\"skin-name\"\r\n                                aria-describedby=\"helpId\"\r\n                                placeholder=\"\"\r\n                                required\r\n                            />\r\n                            <label htmlFor=\"skinPackName\" id=\"skinPackName\">\r\n                                *Skinpack Name\r\n                            </label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                name=\"\"\r\n                                id=\"temp-name\"\r\n                                aria-describedby=\"helpId\"\r\n                                placeholder=\"\"\r\n                                required\r\n                            />\r\n                            <label htmlFor=\"version number\" id=\"version_label\">\r\n                                *Version Number\r\n                            </label>\r\n                            <input\r\n                                type=\"number\"\r\n                                className=\"form-control\"\r\n                                name=\"\"\r\n                                id=\"version\"\r\n                                aria-describedby=\"helpId\"\r\n                                placeholder=\"\"\r\n                                required\r\n                            />\r\n                            <FileInput></FileInput>\r\n                            <br></br>\r\n                            <Col>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    id=\"download\"\r\n                                    className=\"btn btn-primary\"\r\n                                    onClick={handleButtonClick}\r\n                                >\r\n                                    Download Pack\r\n                                </Button>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    id=\"addSkin\"\r\n                                    variant=\"outline-primary\"\r\n                                    onClick={handleButtonClick}\r\n                                >\r\n                                    Add another Skin\r\n                                </Button>\r\n                            </Col>\r\n                            <br></br>\r\n                        </form>\r\n                    </Col>\r\n\r\n                    <Col></Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n","import './styles/styles.css';\nimport Skinview from './components/Skinview';\nimport { Container } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\n\nexport default function App() {\n    window.onresize = () => {\n        // let midCol = document.querySelector('.col-sm-3');\n        let button = document.querySelector('#addSkin');\n        if (window.innerWidth <= 384) {\n            // eslint-disable-next-line no-undef\n            button.style = 'margin-top:1em;margin-left:0em';\n            // add canvas size change too\n        } else {\n            button.style = 'margin:none;';\n        }\n    };\n\n    return (\n        <div className=\"app\">\n            <Container>\n                <div className=\"jumbotron\">\n                    <h1 className=\"display-3\" style={{ textAlign: 'center' }}>\n                        Skinpack Creator for Minecraft Education\n                    </h1>\n                    <hr className=\"my-2\" />\n                </div>\n                <span>\n                    <br></br>\n                    <p>\n                        Create a custom skin (in something like the Skindex),\n                        fill out the name for your skin, name for the skin pack,\n                        and a version number then upload your custom skin image\n                        file as a \".png\".{' '}\n                    </p>\n                    <p>\n                        If you want to add more skins to your pack, select \"add\n                        skin\", otherwise press \"download\" to download your pack.{' '}\n                    </p>\n                    <p>\n                        Once downloaded you can double click the file and or\n                        open it from Minecraft. You can edit Minecraft skins and\n                        download the PNG files from\n                        <a\n                            href=\"https://www.minecraftskins.com/\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            {' '}\n                            The Skindex{' '}\n                        </a>\n                        .\n                    </p>\n                    <br></br>\n                </span>\n                <Skinview></Skinview>\n                <p>\n                    *This web application is not endorsed by or affiliated with\n                    Mojang, Microsoft or Minecraft\n                </p>\n            </Container>\n        </div>\n    );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}